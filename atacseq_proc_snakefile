import glob

# Config file
configfile: "config.yml"

#working directory
#workdir: config['workdir']

# Paths
datadir = config["datadir"]

resdir= config["resdir"]

filtbamdir = resdir + "bam_filtered/"
filtbamdir_dup = resdir + "bam_filtered_noDupRm/"


logdir = config["logdir"]
rawbamdirstats= logdir + "bam_raw_stats/"
filtbamdirstats= logdir + "bam_filt_stats/"

qcdir= resdir + "qc/"
xcordir= qcdir + "xcor/"
fingerprintdir = qcdir + "deepTools_fingerprint/"
corrdir = qcdir + "deepTools_correlationHM/"


deeptoolsdir = resdir + "deepTools/"
covdir1x = deeptoolsdir + "coverage1x/"
covdirCPM = deeptoolsdir + "coverageCPM/"
deeptoolsdir_plots= deeptoolsdir + "plots/"
hmdir = deeptoolsdir + "heatmaps_bin_clust/"
visdir= deeptoolsdir + "visualisations/profiles_genes_with_peaks/"

multiBamSummarydir= deeptoolsdir + "multiBamSummary/"

matrixDir= deeptoolsdir + "profiles/computeMatrix/"
matrixDir_1x= matrixDir + "cov1x/"
matrixDir_cpm= matrixDir + "cpm/"

plotDir=deeptoolsdir + "profiles/plots/"
plotDir_hm_1x=plotDir + "heatmap_cov1x/"
plotDir_hm_cpm=plotDir + "heatmap_cpm/"
plotDir_prof_1x=plotDir + "profile_cov1x/"
plotDir_prof_cpm=plotDir + "profile_cpm/"

matrixDirInd= deeptoolsdir + "profiles/computeMatrix_samples/"
matrixDirInd_1x= matrixDirInd + "cov1x/"
matrixDirInd_cpm= matrixDirInd + "cpm/"

plotDirInd=deeptoolsdir + "profiles/plots_samples/"
plotDirInd_hm_1x=plotDir + "heatmap_cov1x/"
plotDirInd_hm_cpm=plotDir + "heatmap_cpm/"
plotDirInd_prof_1x=plotDir + "profile_cov1x/"
plotDirInd_prof_cpm=plotDir + "profile_cpm/"


macs2dir= resdir + "macs2/"

tmpdir= os.getenv('TMPDIR', default='/tmp')

tempdir= resdir + "temporary/"

# Get samples & file bases in the fastq data directory
bam_base = glob.glob(datadir + "*.bam")                  
bam_base = [s.replace('.bam', '') for s in bam_base]
bam_base = [s.replace(datadir, '') for s in bam_base]


#print(bam_base)


#####################
## TMPDIR

# in this version $TMPDIR is used in the shell code chunks
#####################


# rule all:
#     input:
#         resdir + "rulegraph.png",
#         resdir + "dag.png",
#         expand(filtbamdirstats + "{id}.filt.stats", id=bam_base),
#         expand(xcordir + "{id}.xcor.metrics.txt", id=bam_base),
#         deeptoolsdir_plots + "CorrSpearman_bin5k.pdf",
#         deeptoolsdir_plots + "bamFingerprint.pdf",
#         expand(covdir1x + "{id}.norm1x.bw", id=bam_base),
#         deeptoolsdir_plots + "CorrSpearman_peaks.pdf",
#         expand(macs2dir + "{id}_peaks.xls", id=bam_base),
#         macs2dir + "annotated_reproducible_peaks/all.reproduciblepeaks.merged.GRCm38gene.bed",
#         expand(plotDirInd_hm_1x + "{id}.heatmap_signal.ensGene.TSS.cov1x.k3.pdf", id=bam_base),
#         plotDir_prof_1x + "profiles.ensGene.gene.cov1x.pdf",
#         plotDir_hm_1x + "heatmap_signal.ensGene.gene.cov1x.k4.pdf",
#         visdir + "reproducible_peaks.ensgenes.rpkm.TSS.profile.pdf",
#         macs2dir + "annotated_reproducible_peaks_replicates/ctrl/ctrl.reproduciblepeaks.GRCm38gene.gtf", #annotated peaks within each replicate group
#         macs2dir + "annotated_reproducible_peaks/selected_gene_dist/count_table_peaks/count_table.reproduciblepeaks.genes2k.fCounts.tab",
#         cnts_ctrl_all=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/count_table_peaks/ctrl.count_table.allpeaks.fCounts.tab"

rule all:
    input:
        resdir + "rulegraph.png",
        log_st_stats=expand(filtbamdirstats + "{id}.filt.stats", id=bam_base),
        xcor=expand(xcordir + "{id}.xcor.metrics.txt", id=bam_base),
        corr_bins=deeptoolsdir_plots + "CorrSpearman_bin5k.pdf",
        fingerprint=deeptoolsdir_plots + "bamFingerprint.pdf",
        ens_gene_1x_hm= plotDir_hm_1x + "heatmap_signal.ensGene.gene.cov1x.k4.pdf", #rule plotHeatmap_EnsGene
        ens_gene_1x_profile= plotDir_prof_1x + "profiles.ensGene.gene.cov1x.pdf", #rule plotProfile_EnsGene:
        ens_gene_1x_hm_samples=expand(plotDirInd_hm_1x + "{id}.heatmap_signal.ensGene.TSS.cov1x.k3.pdf", id=bam_base), #rule plotHeatmap_samples:
        corr_peaks=deeptoolsdir_plots + "CorrSpearman_peaks.pdf",
        peaks=macs2dir + "annotated_reproducible_peaks/all.reproduciblepeaks.merged.GRCm38gene.bed",
        allpeaks_cnt_gene = macs2dir + "annotated_reproducible_peaks/selected_gene_dist/count_table_peaks/count_table.reproduciblepeaks.fCounts.tab", #rule featureCounts_reprodPeaks:
        cnts_ctrl_all=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/count_table_peaks/ctrl.count_table.allpeaks.fCounts.tab", #rule featureCounts_replicates:
        out_profile_tss=visdir + "reproducible_peaks.ensgenes.rpkm.TSS.profile.pdf" #rule profile_plots_sel_genes:


rule filter_bam:
    input:
        datadir + "{id}.bam"
    output:
        filt=protected(filtbamdir + "{id}.filt.bam"),
        log_st_flagstat= rawbamdirstats + "{id}.raw.flagstat",
        log_st_idxstats= rawbamdirstats + "{id}.raw.idxstats",
        log_st_stats= rawbamdirstats + "{id}.raw.stats",
        log_picard= logdir + "{id}.MarkDuplicates.metrics.txt",
        log_Mt= logdir + "{id}.filt.Mt.log",
        log_blcklst= logdir + "{id}.filt.blacklist.log",
        nonduprm= filtbamdir_dup +  "{id}.filt.NOduprm.bam",
        nonduprm_idx= filtbamdir_dup +  "{id}.filt.NOduprm.bam.bai",
        bai=filtbamdir + "{id}.filt.bam.bai"

    shell:
        """
        module load bioinfo-tools
        module load samtools/1.9
        module load picard/2.20.4
        
        TMPDIR="${{TMPDIR:-/tmp}}"
        PICARD_HOME="${{PICARD_HOME}}"
    
        echo "sort, index and compute stats for bam file"

        samtools sort -T $TMPDIR/{wildcards.id}.tmp -o $TMPDIR/{wildcards.id}.sorted.bam {input}
        samtools index $TMPDIR/{wildcards.id}.sorted.bam
        
        samtools flagstat $TMPDIR/{wildcards.id}.sorted.bam > {output.log_st_flagstat}
        samtools idxstats $TMPDIR/{wildcards.id}.sorted.bam > {output.log_st_idxstats}
        samtools stats $TMPDIR/{wildcards.id}.sorted.bam > {output.log_st_stats}
    
        
        echo "aln quality filter"

        samtools view -q 1 -hbo $TMPDIR/{wildcards.id}.sorted.q.bam $TMPDIR/{wildcards.id}.sorted.bam

        echo "mark duplicates"

        java -Xmx6G -jar $PICARD_HOME/picard.jar MarkDuplicates I=$TMPDIR/{wildcards.id}.sorted.q.bam \
            O=$TMPDIR/{wildcards.id}.dedup.bam \
            M={output.log_picard} VALIDATION_STRINGENCY=LENIENT REMOVE_DUPLICATES=false \
            ASSUME_SORTED=true TMP_DIR=$TMPDIR

        echo "index and filter reads mapped to Mt; and compute stats for bam file"

        # rm mt and blacklist
        samtools index $TMPDIR/{wildcards.id}.dedup.bam
        samtools view -b -L {config[mt]} -U $TMPDIR/{wildcards.id}.filtMT.bam -o $TMPDIR/{wildcards.id}.filtMT.in.bam $TMPDIR/{wildcards.id}.dedup.bam
        samtools index $TMPDIR/{wildcards.id}.filtMT.bam
        samtools index $TMPDIR/{wildcards.id}.filtMT.in.bam
        samtools flagstat $TMPDIR/{wildcards.id}.filtMT.in.bam > {output.log_Mt}
        
        echo "index and filter reads mapped to blacklist"

        samtools view -hb -L {config[blacklist]} -U $TMPDIR/{wildcards.id}.filt_Mt_blcklist.bam -o $TMPDIR/{wildcards.id}.filt_Mt_blcklist.in.bam $TMPDIR/{wildcards.id}.filtMT.bam
        
        echo "compute stats for filtered bam file"

        samtools index $TMPDIR/{wildcards.id}.filt_Mt_blcklist.bam
        samtools index $TMPDIR/{wildcards.id}.filt_Mt_blcklist.in.bam
        samtools flagstat $TMPDIR/{wildcards.id}.filt_Mt_blcklist.in.bam > {output.log_blcklst}

    
        cp $TMPDIR/{wildcards.id}.filt_Mt_blcklist.bam {output.nonduprm}
        cp $TMPDIR/{wildcards.id}.filt_Mt_blcklist.bam.bai {output.nonduprm_idx}
        
        echo "filter duplicate reads and index final bam file"

        # rm dups
        samtools view -h -F 1024 $TMPDIR/{wildcards.id}.filt_Mt_blcklist.bam | samtools sort -T $TMPDIR/{wildcards.id}.sort.tmp -o {output.filt} -
    
        samtools index {output.filt}
        """

rule bam_stats:
    input:
        filtbamdir + "{id}.filt.bam"
    output:
        log_st_stats= filtbamdirstats + "{id}.filt.stats",
        log_st_flagstat= filtbamdirstats + "{id}.filt.flagstat",
        log_st_idxstats= filtbamdirstats + "{id}.filt.idxstats"
    shell:
        """
        module load bioinfo-tools
        module load samtools/1.9

        samtools flagstat {input} > {output.log_st_flagstat}
        samtools idxstats {input} > {output.log_st_idxstats}
        samtools stats {input} > {output.log_st_stats}
        """

rule xcor:
    input:
        filtbamdir_dup +  "{id}.filt.NOduprm.bam"
    output:
        plot= xcordir + "{id}.xcor.pdf",
        met= xcordir + "{id}.xcor.metrics.txt"
    shell:
        """
        module load bioinfo-tools
        module unload gcc
        module load phantompeakqualtools/1.1

        run_spp.R -c={input} -savp={output.plot} -out={output.met}
        """

rule multiBamSummary:
    input:
        bam=expand(filtbamdir + "{id}.filt.bam", id=bam_base),
        bai=expand(filtbamdir + "{id}.filt.bam.bai", id=bam_base),
    output:
        multiBamSummarydir + "multiBamSum_bin_5k.npz"
    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        multiBamSummary bins --bamfiles {input.bam} --outFileName {output} --binSize=5000 --numberOfProcessors=4 --extendReads={config[extSize]} &>/dev/null
        """

rule plotCorrelation:
    input:
        multiBamSummarydir + "multiBamSum_bin_5k.npz"
    output:
        deeptoolsdir_plots + "CorrSpearman_bin5k.pdf"
    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        plotCorrelation --corData {input} --corMethod spearman --whatToPlot heatmap --plotFile {output} \
            --skipZeros --plotFileFormat pdf --plotNumbers
        """

rule plotFingerprint:
    input:
        expand(filtbamdir + "{id}.filt.bam", id=bam_base)
    output:
        deeptoolsdir_plots + "bamFingerprint.pdf"
    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        plotFingerprint --bamfiles {input} --extendReads {config[extSize]} --binSize=1000 --plotFile {output} --numberOfProcessors=1
        """

rule bamCoverage:
    input:
        bam=filtbamdir + "{id}.filt.bam",
        bai=filtbamdir + "{id}.filt.bam.bai"
    output:
        bw1x= protected(covdir1x + "{id}.norm1x.bw"),
        bg1x= protected(covdir1x + "{id}.norm1x.bg"),
        bwCPM= protected(covdirCPM + "{id}.normCPM.bw"),
        bgCPM= protected(covdirCPM + "{id}.normCPM.bg")


    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        bamCoverage --bam {input.bam} --outFileName {output.bw1x} --normalizeUsing RPGC --effectiveGenomeSize {config[efGenomeSize]} --extendReads {config[extSize]} --binSize 50 --outFileFormat bigwig --ignoreForNormalization X Y MT -p 5 &>/dev/null
        bamCoverage --bam {input.bam} --outFileName {output.bg1x} --normalizeUsing RPGC --effectiveGenomeSize {config[efGenomeSize]} --extendReads {config[extSize]} --binSize 50 --outFileFormat bedgraph --ignoreForNormalization X Y MT -p 5 &>/dev/null

        bamCoverage --bam {input.bam} --outFileName {output.bwCPM} --normalizeUsing CPM --extendReads {config[extSize]} --binSize 50 --outFileFormat bigwig --ignoreForNormalization X Y MT -p 5 &>/dev/null
        bamCoverage --bam {input.bam} --outFileName {output.bgCPM} --normalizeUsing CPM --extendReads {config[extSize]} --binSize 50 --outFileFormat bedgraph --ignoreForNormalization X Y MT -p 5 &>/dev/null
        """


rule computeMatrix_EnsGene:
    input:
        cov1x=expand(covdir1x + "{id}.norm1x.bw", id=bam_base),
        cpm=expand(covdirCPM + "{id}.normCPM.bw", id=bam_base)

    output:
        ens_gene_1x= matrixDir_1x + "ensGene.gene.cov1x.computeMatrix.gz",
        ens_tss_1x= matrixDir_1x + "ensGene.TSS.cov1x.computeMatrix.gz",
        ens_gene_cpm= matrixDir_cpm + "ensGene.gene.CPM.computeMatrix.gz",
        ens_tss_cpm= matrixDir_cpm + "ensGene.TSS.CPM.computeMatrix.gz"

    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        computeMatrix reference-point -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cov1x} -R {config[ensemblGene]} -o {output.ens_tss_1x}
        computeMatrix scale-regions -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cov1x} -R {config[ensemblGene]} -o {output.ens_gene_1x}

        computeMatrix reference-point -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cpm} -R {config[ensemblGene]} -o {output.ens_tss_cpm}
        computeMatrix scale-regions -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cpm} -R {config[ensemblGene]} -o {output.ens_gene_cpm}

        """


rule plotHeatmap_EnsGene:
    input:
        ens_gene_1x= matrixDir_1x + "ensGene.gene.cov1x.computeMatrix.gz",
        ens_tss_1x= matrixDir_1x + "ensGene.TSS.cov1x.computeMatrix.gz",
        ens_gene_cpm= matrixDir_cpm + "ensGene.gene.CPM.computeMatrix.gz",
        ens_tss_cpm= matrixDir_cpm + "ensGene.TSS.CPM.computeMatrix.gz"
    output:
        ens_gene_1x= plotDir_hm_1x + "heatmap_signal.ensGene.gene.cov1x.k4.pdf",
        ens_tss_1x= plotDir_hm_1x + "heatmap_signal.ensGene.TSS.cov1x.k4.pdf",
        ens_gene_cpm= plotDir_hm_cpm + "heatmap_signal.ensGene.gene.CPM.k4.pdf",
        ens_tss_cpm= plotDir_hm_cpm + "heatmap_signal.ensGene.TSS.CPM.k4.pdf"

    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2
        
        plotHeatmap --matrixFile {input.ens_gene_1x} --outFileName {output.ens_gene_1x} --kmeans 4 --sortRegions descend --sortUsing median
        plotHeatmap --matrixFile {input.ens_tss_1x} --outFileName {output.ens_tss_1x} --kmeans 4 --sortRegions descend --sortUsing median
        plotHeatmap --matrixFile {input.ens_tss_cpm} --outFileName {output.ens_tss_cpm} --kmeans 4 --sortRegions descend --sortUsing median
        plotHeatmap --matrixFile {input.ens_gene_cpm} --outFileName {output.ens_gene_cpm} --kmeans 4 --sortRegions descend --sortUsing median
        """


rule plotProfile_EnsGene:
    input:
        ens_gene_1x= matrixDir_1x + "ensGene.gene.cov1x.computeMatrix.gz",
        ens_tss_1x= matrixDir_1x + "ensGene.TSS.cov1x.computeMatrix.gz",
        ens_gene_cpm= matrixDir_cpm + "ensGene.gene.CPM.computeMatrix.gz",
        ens_tss_cpm= matrixDir_cpm + "ensGene.TSS.CPM.computeMatrix.gz"
    output:
        ens_gene_1x= plotDir_prof_1x + "profiles.ensGene.gene.cov1x.pdf",
        ens_tss_1x= plotDir_prof_1x + "profiles.ensGene.TSS.cov1x.pdf",
        ens_gene_cpm= plotDir_prof_cpm + "profiles.ensGene.gene.CPM.pdf",
        ens_tss_cpm= plotDir_prof_cpm + "profiles.ensGene.TSS.CPM.pdf"

    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        plotProfile -m {input.ens_gene_1x} -out {output.ens_gene_1x} --plotType=lines --perGroup
        plotProfile -m {input.ens_tss_1x} -out {output.ens_tss_1x} --plotType=lines --perGroup
        plotProfile -m {input.ens_gene_cpm} -out {output.ens_gene_cpm} --plotType=lines --perGroup
        plotProfile -m {input.ens_tss_cpm} -out {output.ens_tss_cpm} --plotType=lines --perGroup
        """


rule computeMatrix_samples:
    input:
        cov1x=covdir1x + "{id}.norm1x.bw",
        cpm=covdirCPM + "{id}.normCPM.bw"

    output:
        ens_gene_1x= matrixDirInd_1x + "{id}.ensGene.gene.cov1x.computeMatrix.gz",
        ens_TSS_1x= matrixDirInd_1x + "{id}.ensGene.TSS.cov1x.computeMatrix.gz",
        ens_gene_cpm= matrixDirInd_cpm + "{id}.ensGene.gene.CPM.computeMatrix.gz",
        ens_TSS_cpm= matrixDirInd_cpm + "{id}.ensGene.TSS.CPM.computeMatrix.gz"

    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        computeMatrix reference-point -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cov1x} -R {config[ensemblGene]} -o {output.ens_TSS_1x}

        computeMatrix scale-regions -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cov1x} -R {config[ensemblGene]} -o {output.ens_gene_1x}

        computeMatrix reference-point -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cpm} -R {config[ensemblGene]} -o {output.ens_TSS_cpm}

        computeMatrix scale-regions -b 1000 -a 1000 --binSize 5 -p 2 -S {input.cpm} -R {config[ensemblGene]} -o {output.ens_gene_cpm}

        """


rule plotHeatmap_samples:
    input:
        ens_TSS_1x= matrixDirInd_1x + "{id}.ensGene.TSS.cov1x.computeMatrix.gz",
        ens_TSS_cpm= matrixDirInd_cpm + "{id}.ensGene.TSS.CPM.computeMatrix.gz"
    output:
        ens_tss_1x_k3= plotDirInd_hm_1x + "{id}.heatmap_signal.ensGene.TSS.cov1x.k3.pdf",
        ens_tss_1x_k4= plotDirInd_hm_1x + "{id}.heatmap_signal.ensGene.TSS.cov1x.k4.pdf",
        ens_tss_cpm_k3= plotDirInd_hm_cpm + "{id}.heatmap_signal.ensGene.TSS.CPM.k3.pdf",
        ens_tss_cpm_k4= plotDirInd_hm_cpm + "{id}.heatmap_signal.ensGene.TSS.CPM.k4.pdf"

    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2
        
        plotHeatmap --matrixFile {input.ens_TSS_1x} --outFileName {output.ens_tss_1x_k3} --kmeans 3 --sortRegions descend --sortUsing median
        plotHeatmap --matrixFile {input.ens_TSS_1x} --outFileName {output.ens_tss_1x_k4} --kmeans 4 --sortRegions descend --sortUsing median

        plotHeatmap --matrixFile {input.ens_TSS_cpm} --outFileName {output.ens_tss_cpm_k3} --kmeans 3 --sortRegions descend --sortUsing median
        plotHeatmap --matrixFile {input.ens_TSS_cpm} --outFileName {output.ens_tss_cpm_k4} --kmeans 4 --sortRegions descend --sortUsing median
        """



rule MACS2:
    input:
        filtbamdir + "{id}.filt.bam"
    output:
        xls= macs2dir + "{id}_peaks.xls",
        narrowPeak= macs2dir + "{id}_peaks.narrowPeak",
        bed= macs2dir + "{id}_peaks.bed",
        tmp_bed = temporary(macs2dir + "{id}_peaks.tmp.bed")

    shell:
        """
        module load bioinfo-tools
        module load MACS/2.1.2
        
        pth="{output.xls}"

        macs2 callpeak -t {input} -f BAM -g {config[efGenomeSize]} -n ${{pth%_peaks.xls}} -q 0.05 --nomodel --extsize 300 --keep-dup all
        
        cut -f 1,2,3,4,5,6 {output.narrowPeak} > {output.tmp_bed}

        module load BEDOPS/2.4.28
        sort-bed {output.tmp_bed} > {output.bed}
        """



rule mergePeaks:
    input:
        expand(macs2dir + "{id}_peaks.bed", id=bam_base)
    output:
        macs2dir + "merged/merged_peaks.bed"
    shell:
        """
        module load bioinfo-tools
        module load BEDOPS/2.4.28

        bedops --merge {input} > {output}
        """

rule multiBamSummary_peaks:
    input:
        bam=expand(filtbamdir + "{id}.filt.bam", id=bam_base),
        bai=expand(filtbamdir + "{id}.filt.bam.bai", id=bam_base),
        peaks=macs2dir + "merged/merged_peaks.bed"
    output:
        multiBamSummarydir + "multiBamSum_peaks.npz"
    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        echo {input.bam}
            
        multiBamSummary BED-file --BED {input.peaks} --bamfiles {input.bam} --outFileName {output} --numberOfProcessors=2 --extendReads={config[extSize]} &>/dev/null
        """


rule plotCorrelation_peaks:
    input:
        multiBamSummarydir + "multiBamSum_peaks.npz"
    output:
        deeptoolsdir_plots + "CorrSpearman_peaks.pdf"
    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2

        plotCorrelation --corData {input} --corMethod spearman --whatToPlot heatmap --plotFile {output} \
            --skipZeros --plotFileFormat pdf --plotNumbers
        """

###########################
# OBS! sample IDs and name in the script used in this rule are hardcoded (for future improvement ;-))

rule reproducible_peaks:
    input:
        expand(macs2dir + "{id}_peaks.bed", id=bam_base)
    output:
        main=macs2dir + "reproducible_peaks/all.reproduciblepeaks.merged.bed",
        cond1=macs2dir + "reproducible_peaks/ctrl.reproducible_peaks.bed",
        cond2=macs2dir + "reproducible_peaks/LPS6h.reproducible_peaks.bed",
        cond3=macs2dir + "reproducible_peaks/LPS24h.reproducible_peaks.bed"
    shell:
        """
        module load bioinfo-tools
        module load BEDOPS/2.4.28
        module load BEDTools/2.27.1
    
        BEDs="$(dirname {input})"
        Outdir="$(dirname {output.main})"

        echo "$BEDs"
        echo "$Outdir"

        bash src/reproducible_peaks.sh
        """

rule annotate_peaks_reprodPeaks:
    input:
        macs2dir + "reproducible_peaks/all.reproduciblepeaks.merged.bed"
    output:
        annot=macs2dir + "annotated_reproducible_peaks/all.reproduciblepeaks.merged.GRCm38gene.bed",
        peaks_gtf=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.gtf",
        peaks_2k_gtf=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.peaks.gene_dist_2000.gtf",
        genes_2k_bed=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.genes.gene_dist_2000.bed",
        genes_2k_gtf=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.genes.gene_dist_2000.gtf",
        genes_2k_padded=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.genes.gene_dist_2000.gene_coordinates_2500.bed",
        peaks_gtf_tss=macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/reproduciblepeaks.GRCm38gene.tss.gtf",
        peaks_2k_gtf_tss=macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/reproduciblepeaks.GRCm38gene.tss.peaks.TSS_dist_2000.gtf",
        genes_2k_bed_tss=macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/reproduciblepeaks.GRCm38gene.tss.genes.TSS_dist_2000.bed",
        genes_2k_gtf_tss=macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/reproduciblepeaks.GRCm38gene.tss.genes.TSS_dist_2000.gtf",
        genes_2k_padded_tss=macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/reproduciblepeaks.GRCm38gene.tss.genes.TSS_dist_2000.gene_coordinates_2500.bed"
      
    shell:
        """
        module load bioinfo-tools
        module load BEDOPS/2.4.28
        
        closest-features --dist {input} {config[ensemblGene]} >{output.annot}

        perl src/peaks2gff_v2.2.pl --peak_distance 2000 --gene_coord_distance 2500 --infile {output.annot} --outfile {output.peaks_gtf}

        perl src/peaks2gff_v3.1.pl --peak_distance 2000 --gene_coord_distance 2500 --infile {output.annot} --outfile {output.peaks_gtf_tss}
        """



rule featureCounts_reprodPeaks:
    input:
        bam=expand(filtbamdir + "{id}.filt.bam", id=bam_base),
        peaks_gtf_gene=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.gtf",
        peaks_2k_gtf_gene=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.peaks.gene_dist_2000.gtf",
        peaks_gtf_tss=macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/reproduciblepeaks.GRCm38gene.tss.gtf",
        peaks_2k_gtf_tss=macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/reproduciblepeaks.GRCm38gene.tss.peaks.TSS_dist_2000.gtf",
    output:
        allpeaks_cnt_gene = macs2dir + "annotated_reproducible_peaks/selected_gene_dist/count_table_peaks/count_table.reproduciblepeaks.fCounts.tab",
        allpeaks_log_gene = macs2dir + "annotated_reproducible_peaks/selected_gene_dist/count_table_peaks/count_table.reproduciblepeaks.fCounts.tab.summary",
        peaks_genes2k_cnt_gene = macs2dir + "annotated_reproducible_peaks/selected_gene_dist/count_table_peaks/count_table.reproduciblepeaks.genes2k.fCounts.tab",
        peaks_genes2k_log_gene =macs2dir + "annotated_reproducible_peaks/selected_gene_dist/count_table_peaks/count_table.reproduciblepeaks.genes2k.fCounts.tab.summary",
        allpeaks_cnt_tss = macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/count_table_peaks/count_table.reproduciblepeaks.fCounts.tab",
        allpeaks_log_tss = macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/count_table_peaks/count_table.reproduciblepeaks.fCounts.tab.summary",
        peaks_genes2k_cnt_tss = macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/count_table_peaks/count_table.reproduciblepeaks.tss2k.fCounts.tab",
        peaks_genes2k_log_tss =macs2dir + "annotated_reproducible_peaks/selected_TSS_dist/count_table_peaks/count_table.reproduciblepeaks.tss2k.fCounts.tab.summary"

    shell:
        """
        module load bioinfo-tools
        module load subread/2.0.0

        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_gene} -o {output.allpeaks_cnt_gene} {input.bam}
        featureCounts -s 0 -t atacseq_peak -g peak_id -a {input.peaks_2k_gtf_gene} -o {output.peaks_genes2k_cnt_gene} {input.bam}
    
        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_tss} -o {output.allpeaks_cnt_tss} {input.bam}
        featureCounts -s 0 -t atacseq_peak -g peak_id -a {input.peaks_2k_gtf_tss} -o {output.peaks_genes2k_cnt_tss} {input.bam}
        """

rule annotate_peaks_replicates:
    input:
        cond1=macs2dir + "reproducible_peaks/ctrl.reproducible_peaks.bed",
        cond2=macs2dir + "reproducible_peaks/LPS6h.reproducible_peaks.bed",
        cond3=macs2dir + "reproducible_peaks/LPS24h.reproducible_peaks.bed"
    output:
        annot_peaks_ctrl=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/ctrl.reproduciblepeaks.merged.GRCm38gene.bed",
        annot_peaks_6h=macs2dir + "annotated_reproducible_peaks_replicates/6h/LPS6h.reproduciblepeaks.merged.GRCm38gene.bed",
        annot_peaks_24h=macs2dir + "annotated_reproducible_peaks_replicates/24h/LPS24h.reproduciblepeaks.merged.GRCm38gene.bed",
        peaks_gtf_ctrl=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/ctrl.reproduciblepeaks.GRCm38gene.gtf",
        peaks_gtf_6h=macs2dir + "annotated_reproducible_peaks_replicates/6h/LPS6h.reproduciblepeaks.GRCm38gene.gtf",
        peaks_gtf_24h=macs2dir + "annotated_reproducible_peaks_replicates/24h/LPS24h.reproduciblepeaks.GRCm38gene.gtf", 
        peaks_gtf_ctrl_2k=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/ctrl.reproduciblepeaks.GRCm38gene.peaks.TSS_dist_2000.gtf",
        peaks_gtf_6h_2k=macs2dir + "annotated_reproducible_peaks_replicates/6h/LPS6h.reproduciblepeaks.GRCm38gene.peaks.TSS_dist_2000.gtf",
        peaks_gtf_24h_2k=macs2dir + "annotated_reproducible_peaks_replicates/24h/LPS24h.reproduciblepeaks.GRCm38gene.peaks.TSS_dist_2000.gtf"
    shell:
        """
        module load bioinfo-tools
        module load BEDOPS/2.4.28
        
        closest-features --dist {input.cond1} {config[ensemblGene]} >{output.annot_peaks_ctrl}
        closest-features --dist {input.cond2} {config[ensemblGene]} >{output.annot_peaks_6h}
        closest-features --dist {input.cond3} {config[ensemblGene]} >{output.annot_peaks_24h}

        perl src/peaks2gff_v3.1.pl --peak_distance 2000 --gene_coord_distance 2500 --infile {output.annot_peaks_ctrl} --outfile {output.peaks_gtf_ctrl}
        perl src/peaks2gff_v3.1.pl --peak_distance 2000 --gene_coord_distance 2500 --infile {output.annot_peaks_6h} --outfile {output.peaks_gtf_6h}
        perl src/peaks2gff_v3.1.pl --peak_distance 2000 --gene_coord_distance 2500 --infile {output.annot_peaks_24h} --outfile {output.peaks_gtf_24h}
        """



rule featureCounts_replicates:
    input:
        bam=expand(filtbamdir + "{id}.filt.bam", id=bam_base),
        peaks_gtf_ctrl=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/ctrl.reproduciblepeaks.GRCm38gene.gtf",
        peaks_gtf_6h=macs2dir + "annotated_reproducible_peaks_replicates/6h/LPS6h.reproduciblepeaks.GRCm38gene.gtf",
        peaks_gtf_24h=macs2dir + "annotated_reproducible_peaks_replicates/24h/LPS24h.reproduciblepeaks.GRCm38gene.gtf", 
        peaks_gtf_ctrl_2k=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/ctrl.reproduciblepeaks.GRCm38gene.peaks.TSS_dist_2000.gtf",
        peaks_gtf_6h_2k=macs2dir + "annotated_reproducible_peaks_replicates/6h/LPS6h.reproduciblepeaks.GRCm38gene.peaks.TSS_dist_2000.gtf",
        peaks_gtf_24h_2k=macs2dir + "annotated_reproducible_peaks_replicates/24h/LPS24h.reproduciblepeaks.GRCm38gene.peaks.TSS_dist_2000.gtf"

    output:
        cnts_ctrl_all=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/count_table_peaks/ctrl.count_table.allpeaks.fCounts.tab",
        cnts_ctrl_2k=macs2dir + "annotated_reproducible_peaks_replicates/ctrl/count_table_peaks/ctrl.count_table.2kbTSSpeaks.fCounts.tab",
        cnts_6h_all=macs2dir + "annotated_reproducible_peaks_replicates/6h/count_table_peaks/LPS6h.count_table.allpeaks.fCounts.tab",
        cnts_6h_2k=macs2dir + "annotated_reproducible_peaks_replicates/6h/count_table_peaks/LPS6h.count_table.2kbTSSpeaks.fCounts.tab",
        cnts_24h_all=macs2dir + "annotated_reproducible_peaks_replicates/24h/count_table_peaks/LPS24h.count_table.allpeaks.fCounts.tab",
        cnts_24h_2k=macs2dir + "annotated_reproducible_peaks_replicates/24h/count_table_peaks/LPS24h.count_table.2kbTSSpeaks.fCounts.tab"

    shell:
        """
        module load bioinfo-tools
        module load subread/2.0.0

        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_ctrl} -o {output.cnts_ctrl_all} {input.bam}
        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_ctrl_2k} -o {output.cnts_ctrl_2k} {input.bam}

        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_6h} -o {output.cnts_6h_all} {input.bam}
        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_6h_2k} -o {output.cnts_6h_2k} {input.bam}

        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_24h} -o {output.cnts_24h_all} {input.bam}
        featureCounts -s 0 -t atacseq_peak -g peak_id  -a {input.peaks_gtf_24h_2k} -o {output.cnts_24h_2k} {input.bam}
        """



rule subset_bam_to_genes:
    input:
        bam=filtbamdir + "{id}.filt.bam",
        genes_2k_padded=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.genes.gene_dist_2000.gene_coordinates_2500.bed"
    output:
        temp(tempdir + "{id}.filt.subset_genes.bw")
    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2
        module load samtools/1.9
    
        TMPDIR="${{TMPDIR:-/tmp}}"
    
        samtools view -L {input.genes_2k_padded} -hbo $TMPDIR/{wildcards.id}.subset_genes.bam {input.bam}
        samtools index $TMPDIR/{wildcards.id}.subset_genes.bam
    
        ls $TMPDIR

        bamCoverage --normalizeUsing RPKM --exactScaling --extendReads 200 --binSize 1 --outFileFormat bigwig -p 1 --bam $TMPDIR/{wildcards.id}.subset_genes.bam --outFileName {output}
        """

rule profile_plots_sel_genes:
    input:
        bw=expand(tempdir + "{id}.filt.subset_genes.bw", id=bam_base),#LibLabels=expand(bam_base),
        genes_2k_bed=macs2dir + "annotated_reproducible_peaks/selected_gene_dist/reproduciblepeaks.GRCm38gene.genes.gene_dist_2000.bed"
    output:
        out_matrix_region=visdir + "reproducible_peaks.ensgenes.rpkm.genebody.computeMatrix.gz",
        out_matrix_tss=visdir + "reproducible_peaks.ensgenes.rpkm.TSS.computeMatrix.gz",
        out_profile_region=visdir + "reproducible_peaks.ensgenes.rpkm.genebody.profile.pdf",
        out_profile_tss=visdir + "reproducible_peaks.ensgenes.rpkm.TSS.profile.pdf"
    shell:
        """
        module load bioinfo-tools
        module load deepTools/3.3.2
        
        computeMatrix reference-point -b 500 -a 500 --binSize 1 -p 1 -S {input.bw} --referencePoint TSS --smartLabels -R {input.genes_2k_bed} -o ${output.out_matrix_tss}

        computeMatrix scale-regions -b 500 -a 0 --binSize 1 -p 1 -S {input.bw} --smartLabels -R {input.genes_2k_bed} -o {output.out_matrix_region}

        plotProfile -m {output.out_matrix_region} -out {output.out_profile_region} --plotType=lines --perGroup
        plotProfile -m {output.out_matrix_tss} -out {output.out_profile_tss} --plotType=lines --perGroup
        """



################################
## final rules
################################

rule generate_rulegraph:
    """
    Generate a rulegraph for the workflow.
    """
    output:
        resdir + "rulegraph.png",
        resdir + "dag.png"
    shell:
        """
        snakemake --snakefile {config[snkpth]} --config max_reads=0 --rulegraph | dot -Tpng >{output[0]}
        snakemake --snakefile {config[snkpth]} --config max_reads=0 --dag | dot -Tpng >{output[1]}
        """

