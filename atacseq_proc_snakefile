import glob

# Config file
configfile: "config.yml"

#working directory
#workdir: config['workdir']

# Paths
datadir = config["datadir"]

resdir= config["resdir"]

filtbamdir = resdir + "bam_filtered/"
filtbamdir_dup = resdir + "bam_filtered_noDupRm/"


logdir = config["logdir"]
rawbamdirstats= logdir + "bam_raw_stats/"
filtbamdirstats= logdir + "bam_filt_stats/"

qcdir= resdir + "qc/"
xcordir= qcdir + "xcor/"
fingerprintdir = qcdir + "deepTools_fingerprint/"
corrdir = qcdir + "deepTools_correlationHM/"


deeptoolsdir = resdir + "deepTools/"
covdir1x = deeptoolsdir + "coverage1x/"
hmdir = deeptoolsdir + "heatmaps_clust/"
multiBamSummarydir= deeptoolsdir + "multiBamSummary/"

tmpdir= os.getenv('TMPDIR', default='/tmp')

tempdir= resdir + "temporary/"

# Get samples & file bases in the fastq data directory
bam_base = glob.glob(datadir + "*.bam")                  
bam_base = [s.replace('.bam', '') for s in bam_base]
bam_base = [s.replace(datadir, '') for s in bam_base]


#print(bam_base)


#####################
## TMPDIR

# in this version $TMPDIR is used in the shell code chunks
#####################


rule all:
    input:
        resdir + "rulegraph.png",
        resdir + "dag.png",
        expand(filtbamdirstats + "{id}.filt.stats", id=bam_base)


rule filter_bam:
    input:
        datadir + "{id}.bam"
    output:
        filt= filtbamdir + "{id}.filt.bam",
        log_st_flagstat= rawbamdirstats + "{id}.raw.flagstat",
        log_st_idxstats= rawbamdirstats + "{id}.raw.idxstats",
        log_st_stats= rawbamdirstats + "{id}.raw.stats",
        log_picard= logdir + "{id}.MarkDuplicates.metrics.txt",
        log_Mt= logdir + "{id}.filt.Mt.log",
        log_blcklst= logdir + "{id}.filt.blacklist.log",
        nonduprm= temporary(filtbamdir_dup +  "{id}.filt.NOduprm.bam")
    shell:
        """
        module unload python

        module load bioinfo-tools
        module load samtools/1.9
        module load picard/2.20.4
        module load NGSUtils/0.5.9
        
        TMPDIR="${{TMPDIR:-/tmp}}"
        PICARD_HOME="${{PICARD_HOME}}"
    
        samtools sort -T $TMPDIR/{wildcards.id}.tmp -o $TMPDIR/{wildcards.id}.sorted.bam {input}
        samtools index $TMPDIR/{wildcards.id}.sorted.bam

        samtools flagstat $TMPDIR/{wildcards.id}.sorted.bam > {output.log_st_flagstat}
        samtools idxstats $TMPDIR/{wildcards.id}.sorted.bam > {output.log_st_idxstats}
        samtools stats $TMPDIR/{wildcards.id}.sorted.bam > {output.log_st_stats}
    
        samtools view -q 1 -hbo $TMPDIR/{wildcards.id}.sorted.q.bam $TMPDIR/{wildcards.id}.sorted.bam

        java -Xmx6G -jar $PICARD_HOME/picard.jar MarkDuplicates I=$TMPDIR/{wildcards.id}.sorted.q.bam O=$TMPDIR/{wildcards.id}.dedup.bam \
            M={output.log_picard} VALIDATION_STRINGENCY=LENIENT REMOVE_DUPLICATES=false \
            ASSUME_SORTED=true METRICS_FILE={wildcards.id}.MarkDuplicates.metrics.txt TMP_DIR=$TMPDIR

        bamutils filter $TMPDIR/{wildcards.id}.dedup.bam $TMPDIR/{wildcards.id}.filt_M.bam -excluderef M 2>&1 | tee -a {output.log_Mt}

        bamutils filter $TMPDIR/{wildcards.id}.filt_M.bam $TMPDIR/{wildcards.id}.filt_blcklist.bam -excludebed {config[blacklist]} nostrand 2>&1 | tee -a {output.log_blcklst}
        
        cp $TMPDIR/{wildcards.id}.filt_blcklist.bam {output.nonduprm}

        samtools view -F 1024 - $TMPDIR/{wildcards.id}.filt_blcklist.bam | sort -T $TMPDIR/{wildcards.id}.sort.tmp -hbo {output.filt} -
    
        samtools index {output.filt}

        """

rule bam_stats:
    input:
        filtbamdir + "{id}.filt.bam"
    output:
        log_st_stats= filtbamdirstats + "{id}.filt.stats",
        log_st_flagstat= filtbamdirstats + "{id}.filt.flagstat",
        log_st_idxstats= filtbamdirstats + "{id}.filt.idxstats"
    shell:
        """
        module load bioinfo-tools
        module load samtools/1.9

        samtools flagstat {input} > {output.log_st_flagstat}
        samtools idxstats {input} > {output.log_st_idxstats}
        samtools stats {input} > {output.log_st_stats}
        """


################################
## final rules
################################

rule generate_rulegraph:
    """
    Generate a rulegraph for the workflow.
    """
    output:
        resdir + "rulegraph.png",
        resdir + "dag.png"
    shell:
        """
        snakemake --snakefile {config[snkpth]} --config max_reads=0 --rulegraph | dot -Tpng >{output[0]}
        snakemake --snakefile {config[snkpth]} --config max_reads=0 --dag | dot -Tpng >{output[1]}
        """

